<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Vivek Selvaraj</title><description>Software Developer</description><link>https://vivek.dev</link><language>en</language><lastBuildDate>Sat, 16 Oct 2021 00:19:27 +0530</lastBuildDate><pubDate>Sat, 16 Oct 2021 00:19:27 +0530</pubDate><ttl>250</ttl><atom:link href="https://vivek.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://vivek.dev/posts/2021-01-25-Linux-killing-descendant-prcosses</guid><title>Killing all descendant processes in Linux</title><description>How to kill a process and its entire process subtree with a shell script</description><link>https://vivek.dev/posts/2021-01-25-Linux-killing-descendant-prcosses</link><pubDate>Mon, 25 Jan 2021 09:46:00 +0530</pubDate><content:encoded><![CDATA[<h2><code>kill</code> command</h2><p>I want to force stop a process with its process ID. No big deal right? Just run the kill command as <code> kill -9 &lt;pid&gt;</code> to stop it. This works fine when this process has no subprocesses. In my case, the process can have some child processes. These child processes can have more and so on.</p><p>I couldn't kill these processes with the group ID, since my target process was spawned by another process. This made the target process to take up the root process's ID as it's group ID.</p><h2><code>pkill</code> command</h2><p>With some preliminary google search, <code>pkill</code> looked promising. It can kill the child processes of a process with the -P option <code>pkill -P &lt;ppid&gt;</code> (Where ppid is the parent process ID).</p><p>Just got to recursively call this on all the child processes. But how do I find the process IDs of the children? Luckily, from the man page of pkill, I found <code>pgrep</code> - it prints the process IDs.</p><p>Now it's just a matter of wiring them all into a bash script.</p><h2><code>killThemAll.sh</code></h2><pre><code><div class="highlight"><span></span><span class="ch">#!/bin/sh</span>

<span class="c1"># Check if arguments are present</span>
<span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;</span><span class="nv">$1</span><span class="s2">&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
  <span class="nb">echo</span> <span class="s2">&quot;Error: Please enter a Process ID to kill&quot;</span> &gt;<span class="p">&amp;</span><span class="m">2</span>
  <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="c1"># Check if the argument is an integer</span>
<span class="nv">REGEX</span><span class="o">=</span><span class="s1">&#39;^[0-9]+$&#39;</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">=</span>~ <span class="nv">$REGEX</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
  <span class="nb">echo</span> <span class="s2">&quot;Error: Process ID is not a number&quot;</span> &gt;<span class="p">&amp;</span><span class="m">2</span>
  <span class="nb">echo</span> <span class="s2">&quot;Please enter an integer for Process ID&quot;</span> &gt;<span class="p">&amp;</span><span class="m">2</span>
  <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="c1"># Prints the child processes of a process with</span>
<span class="c1"># pgrep command - Recursively</span>
findChildProcesses<span class="o">()</span>
<span class="o">{</span>
  <span class="nv">CHILDREN</span><span class="o">=</span><span class="k">$(</span>pgrep -P <span class="nv">$1</span><span class="k">)</span>
  <span class="k">if</span> <span class="o">[[</span> -n <span class="s2">&quot;</span><span class="nv">$CHILDREN</span><span class="s2">&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="nv">$CHILDREN</span>
  <span class="k">fi</span>
  <span class="k">for</span> PID <span class="k">in</span> <span class="nv">$CHILDREN</span>
  <span class="k">do</span>
    findChildProcesses <span class="nv">$PID</span>
  <span class="k">done</span>
<span class="o">}</span>

<span class="c1"># Command to kill all the processes listed by the above function</span>
<span class="nb">kill</span> -9 <span class="nv">$1</span> <span class="sb">`</span>findChildProcesses <span class="nv">$1</span><span class="sb">`</span>
</div></code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://vivek.dev/posts/2020-12-17-Inception</guid><title>Inception</title><description>Where it all began</description><link>https://vivek.dev/posts/2020-12-17-Inception</link><pubDate>Thu, 17 Dec 2020 22:58:00 +0530</pubDate><content:encoded><![CDATA[<h2>Stacktrace</h2><p>I‚Äôve been an active listener of the <a href="https://podcasts.apple.com/us/podcast/stacktrace/id1359435443?mt=2">Stacktrace</a> podcast by <a href="https://twitter.com/johnsundell">John Sundell</a> and <a href="https://twitter.com/_inside">Gui Rambo</a>. Being a long time Apple follower, I got hooked immediately. This is where I first heard about <a href="https://github.com/JohnSundell/Publish">Publish</a>.</p><h2>Publish</h2><p>It was late last year, when John was talking about his precious little project and how he is going to make it open source eventually. It was a static site generator built with Swift for Swift developers.</p><p>He had built his website <a href="https://www.swiftbysundell.com">Swift by Sundell</a> using Publish. No JavaScript. Just pure HTML and CSS. The site was blazingly fast. The load time was almost instant. Then I decided. If I ever launch a website, I'll have it JavaScript free. And here we are.</p><h2>Catalyst</h2><p>The time has come. I have decided to generate my site using Publish. With the limited knowledge of Swift that I had gained through the first 12 days of <a href="https://www.hackingwithswift.com/100/swiftui">100 Days of SwiftUI</a>, I was able to create a starter website, and customize it to my needs.</p><p>I've always wanted to try my hand at blogging, but I never thought I was good enough to write. A recent <a href="https://twitter.com/twostraws/status/1330559062803673088">tweet</a> by Paul Hudson (the guy behind 100 Days of SwiftUI) was the catalyst that pushed me to do it.</p><p>Welcome to <a href="https://vivek.dev/">vivek.dev</a> üôè</p>]]></content:encoded></item></channel></rss>