<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Vivek Selvaraj</title><description>Software Developer</description><link>https://vivek.dev</link><language>en</language><lastBuildDate>Fri, 19 Feb 2021 09:41:36 +0530</lastBuildDate><pubDate>Fri, 19 Feb 2021 09:41:36 +0530</pubDate><ttl>250</ttl><atom:link href="https://vivek.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://vivek.dev/posts/2021-01-25-Linux-killing-descendant-prcosses</guid><title>Killing all descendant processes in Linux</title><description>How to kill a process and its entire process subtree with a shell script</description><link>https://vivek.dev/posts/2021-01-25-Linux-killing-descendant-prcosses</link><pubDate>Mon, 25 Jan 2021 09:46:00 +0530</pubDate><content:encoded><![CDATA[<h2><code>kill</code> command</h2><p>At my daily job, I had to force stop a process with its process ID. No big deal right? Just run the kill command as <code> kill -9 &lt;pid&gt;</code> to stop it abruptly. This works, if that is the only process that I had to kill. The process can have some subprocesses which are started by it. Those subprocesses can have more subprocesses under it (this can go on forever). The kill command can do the job only if I know the process IDs of all the processes that I want to kill.</p><h2><code>pkill</code> command</h2><p>With some preliminary google search, <code>pkill</code> looked promising. It can kill the child processes of a target process with the -P option <code>pkill -P &lt;ppid&gt;</code> (Where ppid is the parent process ID). Even this does not cater to the recursive killing of subprocesses that I am looking for.</p><h2><code>killThemAll.sh</code></h2><p>Since no built in commands in Linux had the ability to recursively kill the subprocesses of a parent process, I decided to write a shell script of my own. You might think that I could have killed by the process' group ID. In my particular case, the target process itself was spawned by another process. This made the target process and all its subprocesses to take up the parent's process ID as their group ID</p><code>
<pre>
#!/bin/sh

#Check if arguments are present
if [[ -z "$1" ]]; then
  echo "Error: Please enter a Process ID to kill" >&2
  exit 1
fi

#Check if the argument is an integer
REGEX='^[0-9]+$'
if [[ $1 =~ $REGEX ]]; then
  echo "Error: Process ID is not a number. Please enter an integer for Process ID" >&2
  exit 1
fi

#Function which prints the child processes of a process with pgrep command - Recursively
findChildProcesses()
{
  CHILDREN=$(pgrep -P $1)
  if [[ -n "$CHILDREN" ]]; then
    echo $CHILDREN
  fi
  for PID in $CHILDREN
  do
    findChildProcesses $PID
  done
}

#Command to kill all the processes listed by the above function
kill -9 $1 `findChildProcesses $1`
</pre>
</code><p>I sought the help of the <code>pgrep</code> command to find the child processes under a process.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://vivek.dev/posts/2020-12-17-Inception</guid><title>Inception</title><description>Where it all began</description><link>https://vivek.dev/posts/2020-12-17-Inception</link><pubDate>Thu, 17 Dec 2020 22:58:00 +0530</pubDate><content:encoded><![CDATA[<h2>Stacktrace</h2><p>I‚Äôve been a long time listener of the <a href="https://podcasts.apple.com/us/podcast/stacktrace/id1359435443?mt=2">Stacktrace</a> podcast by <a href="https://twitter.com/johnsundell">John Sundell</a> and <a href="https://twitter.com/_inside">Gui Rambo</a>. It's a podcast where they talk about Apple and what projects they are working on. Which are predominantly iOS and Swift projects. And I don't know Swift.</p><p>I started listening to Stacktrace when it used to be a podcast where they discuss Apple's leaks, news and rumours from a developer's perspective. I got hooked immediately. Overtime, it evolved into a podcast where they discuss Apple, Swift, their projects and indie development. This is where I first heard about <a href="https://github.com/JohnSundell/Publish">Publish</a>.</p><h2>Publish</h2><p>It was late last year, when John was talking about his precious little project and how he is going to make it open source eventually. It's a static site generator built with Swift for Swift developers. It was also the time where I was jumping from tutorial to tutorial trying to learn Swift and iOS development.</p><p>He had built his website <a href="https://www.swiftbysundell.com">Swift by Sundell</a> using Publish. No JavaScript. Just pure HTML and CSS. That site was blazingly fast. The load time was almost instant. Then I decided. If I ever launch a website, I'll have it JavaScript free.</p><h2>Catalyst</h2><p>The time has come. I have decided to generate my site using Publish. With the limited knowledge of Swift that I had gained through the first 12 days of <a href="https://www.hackingwithswift.com/100/swiftui">100 Days of SwiftUI</a>, I was able to create a starter website, and customize it to my needs.</p><p>I've always wanted to try my hand at blogging, but I never thought I was good enough to write. A recent <a href="https://twitter.com/twostraws/status/1330559062803673088">tweet</a> by Paul Hudson (the guy behind 100 Days of SwiftUI) was the catalyst that pushed me to do it.</p><p>Welcome to <a href="https://vivek.dev/">vivek.dev</a> üôè</p>]]></content:encoded></item></channel></rss>